name: Continuous Delivery (android)

on:
  push:
    branches: [ main ]
    paths-ignore:
      - README.md
      - .github/**
  workflow_dispatch:

jobs:
  android:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.date.outputs.date }}
    environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '12.x'
          cache: 'gradle'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - name: Create .env file
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "WEB_CLIENT_ID=${{ secrets.WEB_CLIENT_ID }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
      - name: Get date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Get Packages
        run: flutter pub get
      - name: Build APK
        run: flutter build apk --release
      # - name: Send Telegram message
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_TOKEN }}
      #     message: |
      #       ${{ github.actor }} created a commit:
      #       Commit message: ${{ github.event.commits[0].message }}
            
      #       Repository: ${{ github.repository }}
            
      #       See changes: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
      # - name: Send APK to Telegram channel
      #   run: |
      #     curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument" \
      #       -F chat_id=${{ secrets.TELEGRAM_CHANNEL_ID }} \
      #       -F document=@build/app/outputs/flutter-apk/app-release.apk \
      #       -F caption="New APK built and ready for deployment."
      - name: Setup AppCenter
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - run: npm install -g appcenter-cli
      - run: appcenter help

      # Login to AppCenter using the API token
      - name: Login to AppCenter
        run: appcenter login --token ${{ secrets.APPCENTER_API_TOKEN }}

      - name: Deploy android
        run: appcenter distribute release -f ./build/app/outputs/flutter-apk/app-release.apk --app marouane.fagri1-gmail.com/reminder --group Collaborators --debug
        env:
          APPCENTER_API_TOKEN: ${{ secrets.APPCENTER_API_TOKEN }}